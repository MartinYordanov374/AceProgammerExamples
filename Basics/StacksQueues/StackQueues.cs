using System;
using System.Collections.Generic; // Този ред е задължителен, когато искаме да работим със стекове и опашки
namespace regex
{
    class Program
    {
      static void Main(string[] args)
      {
          // Така се създава Stack:
          // Stack < тип данни на стека > ИмеНаСтека = new Stack < тип данни на стека >();
          Stack < int > IntStack = new Stack< int >();

          // Така добавяме елемент към стека
          IntStack.Push(1);
          IntStack.Push(2);

          // Така махаме елемента, който е най-отгоре на стека, т.е. този който сме вкарали последно ( в нашия случай това е числото 2). 
          // След като бъде премахнат, той бива връщан като резултат;
          // това не означава, че той не бива премахван от стека. Означава, че премахнатият елемент може да бъде показан на конзолата, ако сложим кодът на следващия ред в Console.WriteLine()
          IntStack.Pop();

          // Ако искаме да видим последният добавен елемент в стека без да го премахваме ползваме Peek:
          IntStack.Peek();

          // Дължината на стека вземаме с Count:
          int StackLength = IntStack.Count;

          // Ако искаме да проверим дали стека съдържа даден елемент, ползваме Contains(), като между скобите слагаме нещото което искаме да търсим:
          IntStack.Contains(3);

          // Ако искаме да изчистим всички елементи от стека, ползваме Clear:
          IntStack.Clear();




          // Така се създава опашка:
          // Queue < тип данни на опашката > ИмеНаОпашката = new Queue < тип данни на опашката >();
          Queue < int > IntQueue = new Queue<int>();

          // Добавяме елементи в опашката с Enqueue(). 
          // В скобите слагаме елемента, който искаме да добавим в опашката.
          IntQueue.Enqueue(1);
          IntQueue.Enqueue(2);

          // Махаме първият елемент и го връщаме като резултат, ползвайки Dequeue
          IntQueue.Dequeue();

          // връщаме първият елемент като резултат, ползвайки Peek

          IntQueue.Peek();

          // Изчистваме всички елементи от опашката, ползвайки Clear
          IntQueue.Clear();

          // Ако искаме да проверим имаме ли даден елемент в опашката ползваме Contains, като в скобите слагаме елемента който се търси
          IntQueue.Contains(3);
      }
    }
}
